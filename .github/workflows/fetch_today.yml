name: Daily Fixtures & Predictions

on:
  schedule:
    - cron: "0 8 * * *"   # Tous les jours √† 08:00 UTC
    - cron: "0 14 * * *"  # Backup √† 14:00 UTC
  workflow_dispatch:
    inputs:
      debug_mode:
        description: "Enable debug mode"
        required: false
        default: "false"
        type: boolean
      target_date:
        description: "Target date (YYYY-MM-DD, optional)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  fetch_predict:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      DEBUG_MODE: ${{ inputs.debug_mode || 'false' }}
      TARGET_DATE: ${{ inputs.target_date }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests pandas
          fi

      - name: Ensure data dir
        run: mkdir -p data

      # Migrations idempotentes (ne font rien si d√©j√† OK)
      - name: Migrate team_stats.team_id -> TEXT (idempotent)
        run: |
          if [ -f scripts/migrate_team_stats_text.py ]; then
            python -u scripts/migrate_team_stats_text.py || true
          fi
      - name: Create odds tables if missing (idempotent)
        run: |
          if [ -f scripts/migrate_add_odds.py ]; then
            python -u scripts/migrate_add_odds.py || true
          fi
          if [ -f scripts/create_ou25_odds_table.py ]; then
            python -u scripts/create_ou25_odds_table.py || true
          fi

      # (Optionnel) Debug API
      - name: Run API Debug (optional)
        if: env.DEBUG_MODE == 'true'
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          if [ -f scripts/debug_today.py ]; then
            python -u scripts/debug_today.py || true
          fi

      # R√©cup fixtures
      - name: Fetch fixtures
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          set -e
          if [ -n "${TARGET_DATE}" ]; then
            echo "üéØ Fetching fixtures for TARGET_DATE=${TARGET_DATE}"
            DATE="${TARGET_DATE}" python -u scripts/fetch_today.py
          else
            echo "üéØ Fetching fixtures for today (UTC)"
            python -u scripts/fetch_today.py
          fi

      - name: Build ELO history
        run: python -u scripts/build_elo_history.py

      - name: Generate predictions
        run: python -u scripts/generate_predictions.py

      - name: Compute method stats
        run: |
          if [ -f scripts/odds_method_stats.py ]; then
            python -u scripts/odds_method_stats.py || true
          fi

      - name: Export predictions
        run: |
          mkdir -p predictions
          python -u scripts/export_predictions.py --days 1 || true
          # Fallback si pas de fichier pour aujourd'hui
          TODAY=$(date -u +%Y-%m-%d)
          if [ ! -f "predictions/${TODAY}.csv" ]; then
            python -u scripts/export_predictions.py --days 7 || true
          fi

      - name: Generate Summary Report
        run: |
          mkdir -p predictions
          echo "üìã DAILY SUMMARY REPORT" > predictions/daily_summary.md
          echo "======================" >> predictions/daily_summary.md
          echo "Date: $(date -u)" >> predictions/daily_summary.md
          echo "" >> predictions/daily_summary.md
          python - << 'PY'
from src.models.database import db
import datetime
today = (datetime.datetime.utcnow()).strftime('%Y-%m-%d')
with db.get_connection() as conn:
    try:
        matches = conn.execute("SELECT COUNT(*) FROM matches WHERE substr(date,1,10)=?", (today,)).fetchone()[0]
    except Exception:
        matches = 0
    try:
        predictions = conn.execute("SELECT COUNT(*) FROM predictions WHERE substr(created_at,1,10)=?", (today,)).fetchone()[0]
    except Exception:
        predictions = 0
    try:
        teams = conn.execute("SELECT COUNT(*) FROM teams").fetchone()[0]
    except Exception:
        teams = 0
print(f"üìä Stats:\n- Matches today: {matches}\n- Predictions: {predictions}\n- Teams in DB: {teams}")
PY
          >> predictions/daily_summary.md

      - name: Commit & Push updates
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "‚ÑπÔ∏è No changes to commit"
          else
            git commit -m "Daily fixtures & predictions update [skip ci]" || echo "Commit failed"
            git push || echo "Push failed"
          fi
