name: Generate Team Mapping (One-time)

on:
  workflow_dispatch:
    inputs:
      season:
        description: 'Season (YYYY format, e.g., 2024)'
        required: false
        default: '2024'
        type: string
      output_format:
        description: 'Output format'
        required: false
        default: 'both'
        type: choice
        options:
          - 'json'
          - 'csv' 
          - 'both'

permissions:
  contents: write

jobs:
  generate-mapping:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Debug environment
        run: |
          echo "üîç Debugging environment..."
          echo "PYTHONPATH: $PYTHONPATH"
          echo "Working directory: $(pwd)"
          ls -la
          echo "Config directory:"
          ls -la config/ || echo "Config directory not found"
          echo "Python version:"
          python --version
          echo "Installed packages:"
          pip list | grep -E "(requests|pandas)"

      - name: Test API connection
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
        run: |
          echo "üîë Testing API connection..."
          python -c "
          import requests
          import os
          from config.settings import Settings
          
          settings = Settings()
          print(f'API KEY present: {bool(settings.API.API_KEY)}')
          print(f'API KEY length: {len(settings.API.API_KEY) if settings.API.API_KEY else 0}')
          
          # Test simple API call
          try:
              url = f'{settings.API.BASE_URL}/leagues'
              response = requests.get(url, headers=settings.API.headers)
              print(f'API test response: {response.status_code}')
              if response.status_code != 200:
                  print(f'Response text: {response.text[:200]}')
          except Exception as e:
              print(f'API test error: {e}')
          "

      - name: Generate team mapping (simplified)
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
          SEASON: ${{ inputs.season }}
          OUTPUT_FORMAT: ${{ inputs.output_format }}
        run: |
          echo "üöÄ Starting team mapping generation..."
          
          # Cr√©er le dossier output
          mkdir -p output
          
          # Cr√©er un script Python plus simple
          cat > scripts/simple_team_mapping.py << 'EOF'
          import requests
          import pandas as pd
          import json
          import os
          from datetime import datetime
          from difflib import SequenceMatcher
          from config.settings import Settings
          from config.leagues import ALLOWED_LEAGUES
          from config.league_mapping import LEAGUE_CODE_TO_API_ID
          
          def main():
              print("üèÅ Starting team mapping generation...")
              
              settings = Settings()
              season = int(os.getenv("SEASON", "2024"))
              
              # Rapport de base
              report = {
                  "metadata": {
                      "generated_at": datetime.now().isoformat(),
                      "season": season,
                      "total_leagues_processed": 0,
                      "total_teams_mapped": 0,
                      "api_calls_made": 0,
                      "success_rate": 0.0
                  },
                  "leagues": {},
                  "errors": []
              }
              
              team_mapping = {}
              
              # Charger les sources FD
              try:
                  with open('config/fd_sources.json', 'r') as f:
                      sources = json.load(f)["sources"]
                  print(f"üìã {len(sources)} sources loaded")
              except Exception as e:
                  print(f"‚ùå Error loading sources: {e}")
                  report["errors"].append(f"Error loading sources: {e}")
                  return team_mapping, report
              
              successful_leagues = 0
              
              # Traiter seulement les premiers pour le test
              for i, source in enumerate(sources[:5]):  # Limite √† 5 pour le test
                  league_code = source["league_code"]
                  
                  print(f"\nüèÜ Processing {i+1}/5: {league_code}")
                  
                  # V√©rifications
                  if league_code not in LEAGUE_CODE_TO_API_ID:
                      print(f"‚è≠Ô∏è  {league_code}: Not in league mapping")
                      continue
                  
                  league_id = LEAGUE_CODE_TO_API_ID[league_code]
                  if league_id is None:
                      print(f"‚è≠Ô∏è  {league_code}: League ID is None")
                      continue
                  
                  # V√©rifier si autoris√©e
                  league_name = None
                  for name, id_val in ALLOWED_LEAGUES.items():
                      if id_val == league_id:
                          league_name = name
                          break
                  
                  if not league_name:
                      print(f"‚è≠Ô∏è  {league_code}: League ID {league_id} not in allowed leagues")
                      continue
                  
                  try:
                      # API call pour les standings
                      print(f"    üì° Getting standings for league {league_id}")
                      url = f"{settings.API.BASE_URL}/standings"
                      params = {"league": league_id, "season": season}
                      response = requests.get(url, headers=settings.API.headers, params=params)
                      report["metadata"]["api_calls_made"] += 1
                      
                      if response.status_code != 200:
                          error_msg = f"API error {response.status_code} for {league_code}"
                          print(f"    ‚ùå {error_msg}")
                          report["errors"].append(error_msg)
                          continue
                      
                      data = response.json()
                      api_teams = []
                      
                      if data.get("response") and len(data["response"]) > 0:
                          standings = data["response"][0]["league"]["standings"]
                          if isinstance(standings[0], list):
                              # Format avec groupes
                              for group in standings:
                                  for team_data in group:
                                      api_teams.append({
                                          "name": team_data["team"]["name"],
                                          "id": team_data["team"]["id"]
                                      })
                          else:
                              # Format simple
                              for team_data in standings:
                                  api_teams.append({
                                      "name": team_data["team"]["name"],
                                      "id": team_data["team"]["id"]
                                  })
                      
                      print(f"    ‚úÖ {len(api_teams)} API teams found")
                      
                      # Football Data teams
                      print(f"    üåê Getting FD teams from CSV")
                      df = pd.read_csv(source["url"])
                      fd_teams = set()
                      if 'HomeTeam' in df.columns and 'AwayTeam' in df.columns:
                          fd_teams.update(df['HomeTeam'].dropna().unique())
                          fd_teams.update(df['AwayTeam'].dropna().unique())
                      
                      fd_teams = [team for team in fd_teams if team and str(team).strip()]
                      print(f"    ‚úÖ {len(fd_teams)} FD teams found")
                      
                      # Simple mapping (exact match only pour simplifier)
                      mapping = {}
                      for fd_team in fd_teams:
                          for api_team in api_teams:
                              if fd_team.lower().replace(" ", "") == api_team["name"].lower().replace(" ", ""):
                                  mapping[fd_team] = api_team["name"]
                                  break
                      
                      if mapping:
                          team_mapping[str(league_id)] = mapping
                          successful_leagues += 1
                          
                          report["leagues"][league_code] = {
                              "name": league_name,
                              "id": league_id,
                              "status": "success",
                              "mapped_teams": len(mapping),
                              "total_fd_teams": len(fd_teams),
                              "total_api_teams": len(api_teams)
                          }
                          
                          print(f"    ‚úÖ {len(mapping)} teams mapped")
                      else:
                          report["leagues"][league_code] = {
                              "name": league_name,
                              "id": league_id,
                              "status": "no_mapping"
                          }
                          print(f"    ‚ùå No teams mapped")
                  
                  except Exception as e:
                      error_msg = f"Error processing {league_code}: {str(e)}"
                      print(f"    ‚ùå {error_msg}")
                      report["errors"].append(error_msg)
              
              # Finaliser le rapport
              report["metadata"]["total_leagues_processed"] = successful_leagues
              report["metadata"]["total_teams_mapped"] = sum(len(teams) for teams in team_mapping.values())
              
              print(f"\nüéâ Generation completed:")
              print(f"   üìä {successful_leagues} leagues processed")
              print(f"   üèüÔ∏è  {report['metadata']['total_teams_mapped']} teams mapped")
              print(f"   üì° {report['metadata']['api_calls_made']} API calls made")
              
              return team_mapping, report
          
          def save_results(team_mapping, report):
              """Sauvegarde les r√©sultats"""
              print("üíæ Saving results...")
              
              try:
                  # Sauvegarder le mapping
                  with open("output/team_mapping.json", "w", encoding="utf-8") as f:
                      json.dump(team_mapping, f, indent=2, ensure_ascii=False)
                  print("‚úÖ team_mapping.json saved")
                  
                  # Sauvegarder le rapport
                  with open("output/team_mapping_report.json", "w", encoding="utf-8") as f:
                      json.dump(report, f, indent=2, ensure_ascii=False)
                  print("‚úÖ team_mapping_report.json saved")
                  
                  # Cr√©er un CSV simple
                  csv_data = []
                  for league_id, teams in team_mapping.items():
                      for fd_name, api_name in teams.items():
                          csv_data.append({
                              "league_id": league_id,
                              "fd_team": fd_name,
                              "api_team": api_name
                          })
                  
                  if csv_data:
                      df = pd.DataFrame(csv_data)
                      df.to_csv("output/team_mapping.csv", index=False)
                      print("‚úÖ team_mapping.csv saved")
                  
                  return True
              except Exception as e:
                  print(f"‚ùå Error saving results: {e}")
                  return False
          
          if __name__ == "__main__":
              try:
                  mapping, report = main()
                  success = save_results(mapping, report)
                  if not success:
                      exit(1)
              except Exception as e:
                  print(f"‚ùå Script failed: {e}")
                  # Cr√©er un rapport d'erreur minimal
                  error_report = {
                      "metadata": {
                          "generated_at": datetime.now().isoformat(),
                          "total_leagues_processed": 0,
                          "total_teams_mapped": 0,
                          "api_calls_made": 0,
                          "success_rate": 0.0
                      },
                      "errors": [str(e)]
                  }
                  with open("output/team_mapping_report.json", "w") as f:
                      json.dump(error_report, f, indent=2)
                  exit(1)
          EOF
          
          # Ex√©cuter le script
          python -u scripts/simple_team_mapping.py
          
          # V√©rifier les r√©sultats
          echo "üìÅ Checking generated files:"
          ls -la output/ || echo "No output directory"

      - name: Create simple markdown report
        if: always()
        run: |
          echo "üìù Creating simple report..."
          
          if [ -f "output/team_mapping_report.json" ]; then
              python -c "
              import json
              
              with open('output/team_mapping_report.json', 'r') as f:
                  report = json.load(f)
              
              md_lines = []
              md_lines.append('# üèÜ Team Mapping Report')
              md_lines.append('')
              md_lines.append(f'**Generated:** {report[\"metadata\"][\"generated_at\"]}')
              md_lines.append(f'**Season:** {report[\"metadata\"][\"season\"]}')
              md_lines.append(f'**Leagues processed:** {report[\"metadata\"][\"total_leagues_processed\"]}')
              md_lines.append(f'**Teams mapped:** {report[\"metadata\"][\"total_teams_mapped\"]}')
              md_lines.append(f'**API calls:** {report[\"metadata\"][\"api_calls_made\"]}')
              md_lines.append('')
              
              if report.get('errors'):
                  md_lines.append('## ‚ùå Errors')
                  for error in report['errors']:
                      md_lines.append(f'- {error}')
                  md_lines.append('')
              
              if report.get('leagues'):
                  md_lines.append('## üìä Leagues')
                  for code, info in report['leagues'].items():
                      status = '‚úÖ' if info['status'] == 'success' else '‚ùå'
                      md_lines.append(f'- {status} **{code}** ({info[\"name\"]})')
              
              with open('output/REPORT.md', 'w') as f:
                  f.write('\\n'.join(md_lines))
              
              print('‚úÖ Report created')
              "
          else
              echo "‚ùå No report file found, creating error report"
              echo "# ‚ùå Team Mapping Failed" > output/REPORT.md
              echo "The team mapping generation failed. Check the workflow logs for details." >> output/REPORT.md
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: team-mapping-results
          path: output/
          retention-days: 30

      - name: Create summary
        if: always()
        run: |
          echo "## üìã Team Mapping Summary" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "output/team_mapping_report.json" ]; then
              LEAGUES=$(python -c "
              import json
              try:
                  with open('output/team_mapping_report.json', 'r') as f:
                      report = json.load(f)
                  print(report['metadata']['total_leagues_processed'])
              except:
                  print('0')
              ")
              
              TEAMS=$(python -c "
              import json
              try:
                  with open('output/team_mapping_report.json', 'r') as f:
                      report = json.load(f)
                  print(report['metadata']['total_teams_mapped'])
              except:
                  print('0')
              ")
              
              echo "‚úÖ **Status:** Completed" >> $GITHUB_STEP_SUMMARY
              echo "üìä **Leagues:** $LEAGUES" >> $GITHUB_STEP_SUMMARY
              echo "üèüÔ∏è **Teams:** $TEAMS" >> $GITHUB_STEP_SUMMARY
          else
              echo "‚ùå **Status:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Files generated:**" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "output" ]; then
              for file in output/*; do
                  if [ -f "$file" ]; then
                      filename=$(basename "$file")
                      echo "- \`$filename\`" >> $GITHUB_STEP_SUMMARY
                  fi
              done
          else
              echo "- No files generated" >> $GITHUB_STEP_SUMMARY
          fi
