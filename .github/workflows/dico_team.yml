name: Generate Complete Team Mapping

on:
  workflow_dispatch:
    inputs:
      season:
        description: 'Season (YYYY format)'
        required: false
        default: '2024'
        type: string
      max_leagues:
        description: 'Max leagues to process (0 = all)'
        required: false
        default: '0'
        type: string

permissions:
  contents: write

jobs:
  generate-mapping:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate comprehensive team mapping
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
          SEASON: ${{ inputs.season }}
          MAX_LEAGUES: ${{ inputs.max_leagues }}
        run: |
          mkdir -p output
          
          cat > scripts/comprehensive_team_mapping.py << 'EOF'
          import requests
          import pandas as pd
          import json
          import os
          import time
          from datetime import datetime
          from difflib import SequenceMatcher
          from config.settings import Settings
          from config.leagues import ALLOWED_LEAGUES
          from config.league_mapping import LEAGUE_CODE_TO_API_ID
          
          def normalize_team_name(name):
              """Normalisation avanc√©e des noms d'√©quipe"""
              if not name or not isinstance(name, str):
                  return ""
              
              # Mapping des √©quivalences connues
              team_equivalents = {
                  # Premier League
                  "Man United": "Manchester United",
                  "Man City": "Manchester City", 
                  "Spurs": "Tottenham",
                  "Leicester": "Leicester City",
                  "Brighton": "Brighton & Hove Albion",
                  "Wolves": "Wolverhampton Wanderers",
                  "Newcastle": "Newcastle United",
                  "West Ham": "West Ham United",
                  "Sheffield United": "Sheffield Utd",
                  
                  # La Liga
                  "Ath Madrid": "Atletico Madrid",
                  "Ath Bilbao": "Athletic Bilbao",
                  "Betis": "Real Betis",
                  "Sociedad": "Real Sociedad",
                  "Vallecano": "Rayo Vallecano",
                  
                  # Bundesliga
                  "Bayern Munich": "Bayern M√ºnchen",
                  "Dortmund": "Borussia Dortmund",
                  "RB Leipzig": "RasenBallsport Leipzig",
                  "Leverkusen": "Bayer Leverkusen",
                  "M'gladbach": "Borussia M√∂nchengladbach",
                  "Ein Frankfurt": "Eintracht Frankfurt",
                  
                  # Serie A
                  "Inter": "Inter Milan",
                  "AC Milan": "Milan",
                  "Roma": "AS Roma",
                  "Lazio": "SS Lazio",
                  "Napoli": "SSC Napoli",
                  
                  # Ligue 1
                  "Paris SG": "Paris Saint Germain",
                  "Saint-Etienne": "AS Saint Etienne",
                  "Marseille": "Olympique Marseille",
                  "Lyon": "Olympique Lyonnais",
              }
              
              # V√©rifier les √©quivalences directes
              if name in team_equivalents:
                  name = team_equivalents[name]
              
              # Normalisation g√©n√©rale
              replacements = [
                  # Pr√©fixes/suffixes courants
                  ("FC ", ""), (" FC", ""), ("CF ", ""), (" CF", ""),
                  ("AC ", ""), (" AC", ""), ("SC ", ""), (" SC", ""),
                  ("AS ", ""), (" AS", ""), ("CD ", ""), (" CD", ""),
                  ("SK ", ""), (" SK", ""), ("FK ", ""), (" FK", ""),
                  ("1. ", ""), ("2. ", ""), ("SV ", ""), (" SV", ""),
                  ("Real ", ""), ("Club ", ""), ("Deportivo ", ""),
                  
                  # Caract√®res sp√©ciaux
                  ("√º", "u"), ("√∂", "o"), ("√§", "a"), ("√ü", "ss"),
                  ("√©", "e"), ("√®", "e"), ("√™", "e"), ("√´", "e"),
                  ("√†", "a"), ("√°", "a"), ("√¢", "a"), ("√£", "a"),
                  ("√ß", "c"), ("√±", "n"), ("√∏", "o"), ("√•", "a"),
                  
                  # Mots courants
                  ("Saint ", "St "), ("Saint-", "St-"),
                  ("Athletic ", ""), ("Atletico ", "Atletico "),
                  ("Borussia ", ""), ("Olympique ", ""),
                  
                  # Espaces multiples
                  ("  ", " "), ("   ", " "),
              ]
              
              normalized = name
              for old, new in replacements:
                  normalized = normalized.replace(old, new)
              
              return normalized.strip()
          
          def similarity_score(name1, name2):
              """Calcule un score de similarit√© avanc√©"""
              if not name1 or not name2:
                  return 0.0
              
              # Normaliser les deux noms
              norm1 = normalize_team_name(name1).lower()
              norm2 = normalize_team_name(name2).lower()
              
              # Score exact apr√®s normalisation
              if norm1 == norm2:
                  return 1.0
              
              # Score de similarit√© de base
              base_score = SequenceMatcher(None, norm1, norm2).ratio()
              
              # Bonus si un nom contient l'autre
              if norm1 in norm2 or norm2 in norm1:
                  base_score = max(base_score, 0.85)
              
              # Bonus pour les mots en commun
              words1 = set(norm1.split())
              words2 = set(norm2.split())
              if words1 and words2:
                  common_words = len(words1.intersection(words2))
                  total_words = len(words1.union(words2))
                  word_score = common_words / total_words
                  base_score = max(base_score, word_score * 0.9)
              
              return base_score
          
          def match_teams_advanced(fd_teams, api_teams):
              """Matching avanc√© des √©quipes"""
              matches = []
              unmatched_fd = []
              
              for fd_team in fd_teams:
                  best_match = None
                  best_score = 0.0
                  best_api_team = None
                  
                  for api_team in api_teams:
                      score = similarity_score(fd_team, api_team["name"])
                      if score > best_score:
                          best_score = score
                          best_match = api_team["name"]
                          best_api_team = api_team
                  
                  # Seuil de confiance plus bas mais avec validation
                  if best_score >= 0.7:  # Abaiss√© de 0.75 √† 0.7
                      matches.append({
                          "fd_team": fd_team,
                          "api_team": best_match,
                          "api_team_id": best_api_team["id"],
                          "confidence": round(best_score, 3),
                          "match_type": "exact" if best_score >= 0.95 else "similarity"
                      })
                  else:
                      unmatched_fd.append(fd_team)
              
              return matches, unmatched_fd
          
          def main():
              print("üèÅ Starting comprehensive team mapping generation...")
              
              settings = Settings()
              season = int(os.getenv("SEASON", "2024"))
              max_leagues = int(os.getenv("MAX_LEAGUES", "0"))
              
              report = {
                  "metadata": {
                      "generated_at": datetime.now().isoformat(),
                      "season": season,
                      "total_leagues_processed": 0,
                      "total_teams_mapped": 0,
                      "api_calls_made": 0,
                      "success_rate": 0.0
                  },
                  "leagues": {},
                  "mapping_summary": {},
                  "unmatched_teams": {},
                  "errors": []
              }
              
              team_mapping = {}
              
              # Charger les sources
              try:
                  with open('config/fd_sources.json', 'r') as f:
                      sources = json.load(f)["sources"]
                  print(f"üìã {len(sources)} sources loaded")
              except Exception as e:
                  print(f"‚ùå Error loading sources: {e}")
                  report["errors"].append(f"Error loading sources: {e}")
                  return team_mapping, report
              
              # Limiter si demand√©
              if max_leagues > 0:
                  sources = sources[:max_leagues]
                  print(f"üî¢ Limited to {len(sources)} leagues for testing")
              
              successful_leagues = 0
              
              for i, source in enumerate(sources):
                  league_code = source["league_code"]
                  print(f"\nüèÜ Processing {i+1}/{len(sources)}: {league_code}")
                  
                  # V√©rifications
                  if league_code not in LEAGUE_CODE_TO_API_ID:
                      print(f"‚è≠Ô∏è  {league_code}: Not in league mapping")
                      continue
                  
                  league_id = LEAGUE_CODE_TO_API_ID[league_code]
                  if league_id is None:
                      print(f"‚è≠Ô∏è  {league_code}: League ID is None")
                      continue
                  
                  # V√©rifier si autoris√©e
                  league_name = None
                  for name, id_val in ALLOWED_LEAGUES.items():
                      if id_val == league_id:
                          league_name = name
                          break
                  
                  if not league_name:
                      print(f"‚è≠Ô∏è  {league_code}: League ID {league_id} not in allowed leagues")
                      continue
                  
                  try:
                      # Petit d√©lai pour √©viter les rate limits
                      if i > 0:
                          time.sleep(0.5)
                      
                      # API call pour les standings
                      print(f"    üì° Getting standings for league {league_id}")
                      url = f"{settings.API.BASE_URL}/standings"
                      params = {"league": league_id, "season": season}
                      response = requests.get(url, headers=settings.API.headers, params=params)
                      report["metadata"]["api_calls_made"] += 1
                      
                      if response.status_code != 200:
                          error_msg = f"API error {response.status_code} for {league_code}"
                          print(f"    ‚ùå {error_msg}")
                          report["errors"].append(error_msg)
                          continue
                      
                      data = response.json()
                      api_teams = []
                      
                      if data.get("response") and len(data["response"]) > 0:
                          standings = data["response"][0]["league"]["standings"]
                          if isinstance(standings[0], list):
                              # Format avec groupes
                              for group in standings:
                                  for team_data in group:
                                      api_teams.append({
                                          "name": team_data["team"]["name"],
                                          "id": team_data["team"]["id"]
                                      })
                          else:
                              # Format simple
                              for team_data in standings:
                                  api_teams.append({
                                      "name": team_data["team"]["name"],
                                      "id": team_data["team"]["id"]
                                  })
                      
                      print(f"    ‚úÖ {len(api_teams)} API teams found")
                      
                      # Football Data teams
                      print(f"    üåê Getting FD teams from CSV")
                      df = pd.read_csv(source["url"])
                      fd_teams = set()
                      if 'HomeTeam' in df.columns and 'AwayTeam' in df.columns:
                          fd_teams.update(df['HomeTeam'].dropna().unique())
                          fd_teams.update(df['AwayTeam'].dropna().unique())
                      
                      fd_teams = [team for team in fd_teams if team and str(team).strip()]
                      print(f"    ‚úÖ {len(fd_teams)} FD teams found")
                      
                      # Matching avanc√©
                      matches, unmatched = match_teams_advanced(fd_teams, api_teams)
                      
                      if matches:
                          # Cr√©er le mapping
                          mapping = {}
                          for match in matches:
                              mapping[match["fd_team"]] = match["api_team"]
                          
                          team_mapping[str(league_id)] = mapping
                          successful_leagues += 1
                          
                          success_rate = len(matches) / len(fd_teams) * 100
                          
                          report["leagues"][league_code] = {
                              "name": league_name,
                              "id": league_id,
                              "status": "success",
                              "fd_teams_count": len(fd_teams),
                              "api_teams_count": len(api_teams),
                              "mapped_teams_count": len(matches),
                              "success_rate": round(success_rate, 1),
                              "matches": matches
                          }
                          
                          if unmatched:
                              report["unmatched_teams"][league_code] = unmatched
                          
                          print(f"    ‚úÖ {len(matches)}/{len(fd_teams)} teams mapped ({success_rate:.1f}%)")
                          
                          if unmatched:
                              print(f"    ‚ö†Ô∏è  Unmatched: {unmatched[:3]}{'...' if len(unmatched) > 3 else ''}")
                      else:
                          report["leagues"][league_code] = {
                              "name": league_name,
                              "id": league_id,
                              "status": "no_mapping",
                              "fd_teams_count": len(fd_teams),
                              "api_teams_count": len(api_teams)
                          }
                          print(f"    ‚ùå No teams mapped")
                  
                  except Exception as e:
                      error_msg = f"Error processing {league_code}: {str(e)}"
                      print(f"    ‚ùå {error_msg}")
                      report["errors"].append(error_msg)
              
              # Finaliser le rapport
              report["metadata"]["total_leagues_processed"] = successful_leagues
              report["metadata"]["total_teams_mapped"] = sum(len(teams) for teams in team_mapping.values())
              
              if len(sources) > 0:
                  report["metadata"]["success_rate"] = round(successful_leagues / len(sources) * 100, 1)
              
              print(f"\nüéâ Generation completed:")
              print(f"   üìä {successful_leagues}/{len(sources)} leagues processed")
              print(f"   üèüÔ∏è  {report['metadata']['total_teams_mapped']} teams mapped")
              print(f"   üì° {report['metadata']['api_calls_made']} API calls made")
              
              return team_mapping, report
          
          def save_comprehensive_results(team_mapping, report):
              """Sauvegarde compl√®te des r√©sultats"""
              print("üíæ Saving comprehensive results...")
              
              try:
                  # 1. Mapping principal
                  with open("output/team_mapping.json", "w", encoding="utf-8") as f:
                      json.dump(team_mapping, f, indent=2, ensure_ascii=False)
                  
                  # 2. Rapport d√©taill√©
                  with open("output/detailed_report.json", "w", encoding="utf-8") as f:
                      json.dump(report, f, indent=2, ensure_ascii=False)
                  
                  # 3. CSV avec d√©tails
                  csv_data = []
                  for league_code, league_info in report["leagues"].items():
                      if league_info["status"] == "success" and "matches" in league_info:
                          for match in league_info["matches"]:
                              csv_data.append({
                                  "league_code": league_code,
                                  "league_name": league_info["name"],
                                  "league_id": league_info["id"],
                                  "fd_team": match["fd_team"],
                                  "api_team": match["api_team"],
                                  "api_team_id": match["api_team_id"],
                                  "confidence": match["confidence"],
                                  "match_type": match["match_type"]
                              })
                  
                  if csv_data:
                      df = pd.DataFrame(csv_data)
                      df.to_csv("output/team_mapping_detailed.csv", index=False)
                  
                  # 4. CSV des non-match√©s
                  unmatched_data = []
                  for league_code, teams in report.get("unmatched_teams", {}).items():
                      league_info = report["leagues"][league_code]
                      for team in teams:
                          unmatched_data.append({
                              "league_code": league_code,
                              "league_name": league_info["name"],
                              "league_id": league_info["id"],
                              "fd_team": team
                          })
                  
                  if unmatched_data:
                      df_unmatched = pd.DataFrame(unmatched_data)
                      df_unmatched.to_csv("output/unmatched_teams.csv", index=False)
                  
                  print("‚úÖ All files saved successfully")
                  return True
              except Exception as e:
                  print(f"‚ùå Error saving results: {e}")
                  return False
          
          if __name__ == "__main__":
              try:
                  mapping, report = main()
                  success = save_comprehensive_results(mapping, report)
                  if not success:
                      exit(1)
              except Exception as e:
                  print(f"‚ùå Script failed: {e}")
                  import traceback
                  traceback.print_exc()
                  exit(1)
          EOF
          
          python -u scripts/comprehensive_team_mapping.py

      - name: Create detailed report
        if: always()
        run: |
          cat > create_detailed_report.py << 'EOF'
          import json
          import os
          
          def create_markdown_report():
              if not os.path.exists('output/detailed_report.json'):
                  return "# ‚ùå No detailed report found"
              
              with open('output/detailed_report.json', 'r') as f:
                  report = json.load(f)
              
              lines = []
              lines.append("# üèÜ Comprehensive Team Mapping Report")
              lines.append("")
              
              # M√©tadonn√©es
              meta = report["metadata"]
              lines.append(f"**Generated:** {meta['generated_at']}")
              lines.append(f"**Season:** {meta['season']}")
              lines.append(f"**Total leagues processed:** {meta['total_leagues_processed']}")
              lines.append(f"**Total teams mapped:** {meta['total_teams_mapped']}")
              lines.append(f"**API calls made:** {meta['api_calls_made']}")
              lines.append(f"**Overall success rate:** {meta['success_rate']}%")
              lines.append("")
              
              # R√©sum√© par ligue
              lines.append("## üìä League Summary")
              lines.append("")
              lines.append("| League Code | League Name | Status | Teams Mapped | Success Rate |")
              lines.append("|-------------|-------------|---------|--------------|--------------|")
              
              success_count = 0
              for code, info in report["leagues"].items():
                  status_icon = "‚úÖ" if info["status"] == "success" else "‚ùå"
                  mapped_count = info.get("mapped_teams_count", 0)
                  success_rate = info.get("success_rate", 0)
                  
                  lines.append(f"| {code} | {info['name']} | {status_icon} | {mapped_count} | {success_rate}% |")
                  
                  if info["status"] == "success":
                      success_count += 1
              
              lines.append("")
              lines.append(f"**Summary:** {success_count} successful leagues out of {len(report['leagues'])}")
              lines.append("")
              
              # Top matchings par confiance
              lines.append("## üéØ Best Matches (High Confidence)")
              lines.append("")
              
              all_matches = []
              for code, info in report["leagues"].items():
                  if info["status"] == "success" and "matches" in info:
                      for match in info["matches"]:
                          match["league_code"] = code
                          match["league_name"] = info["name"]
                          all_matches.append(match)
              
              # Trier par confiance
              all_matches.sort(key=lambda x: x["confidence"], reverse=True)
              
              if all_matches:
                  lines.append("| League | FD Team | API Team | Confidence | Type |")
                  lines.append("|--------|---------|----------|------------|------|")
                  
                  for match in all_matches[:20]:  # Top 20
                      lines.append(f"| {match['league_code']} | {match['fd_team']} | {match['api_team']} | {match['confidence']} | {match['match_type']} |")
              
              lines.append("")
              
              # Teams non match√©es
              if report.get("unmatched_teams"):
                  lines.append("## ‚ö†Ô∏è Unmatched Teams")
                  lines.append("")
                  
                  for league_code, teams in report["unmatched_teams"].items():
                      if teams:  # Si il y a des √©quipes non match√©es
                          league_name = report["leagues"][league_code]["name"]
                          lines.append(f"### {league_code} - {league_name}")
                          for team in teams[:10]:  # Max 10 par ligue
                              lines.append(f"- {team}")
                          if len(teams) > 10:
                              lines.append(f"- ... and {len(teams) - 10} more")
                          lines.append("")
              
              # Erreurs
              if report.get("errors"):
                  lines.append("## ‚ùå Errors Encountered")
                  lines.append("")
                  for error in report["errors"][:10]:  # Max 10 erreurs
                      lines.append(f"- {error}")
                  lines.append("")
              
              # Instructions
              lines.append("## üìñ Usage Instructions")
              lines.append("")
              lines.append("### Using the mapping in Python:")
              lines.append("```python")
              lines.append("import json")
              lines.append("")
              lines.append("# Load the mapping")
              lines.append('with open("team_mapping.json", "r") as f:')
              lines.append("    mapping = json.load(f)")
              lines.append("")
              lines.append("# Get API team name")
              lines.append('league_id = "39"  # Premier League')
              lines.append('fd_team_name = "Arsenal"')
              lines.append("if league_id in mapping and fd_team_name in mapping[league_id]:")
              lines.append("    api_team_name = mapping[league_id][fd_team_name]")
              lines.append('    print(f"FD: {fd_team_name} -> API: {api_team_name}")')
              lines.append("```")
              lines.append("")
              
              return "\n".join(lines)
          
          # Cr√©er le rapport
          markdown_content = create_markdown_report()
          with open("output/COMPREHENSIVE_REPORT.md", "w", encoding="utf-8") as f:
              f.write(markdown_content)
          
          print("‚úÖ Detailed markdown report created")
          EOF
          
          python create_detailed_report.py

      - name: Upload comprehensive artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-team-mapping
          path: output/
          retention-days: 30

      - name: Final summary
        if: always()
        run: |
          echo "## üèÜ Comprehensive Team Mapping Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "output/detailed_report.json" ]; then
              python -c "
          import json
          with open('output/detailed_report.json', 'r') as f:
              report = json.load(f)
          
          meta = report['metadata']
          print(f'‚úÖ **Status:** Completed successfully')
          print(f'üìä **Leagues processed:** {meta[\"total_leagues_processed\"]}')
          print(f'üèüÔ∏è **Teams mapped:** {meta[\"total_teams_mapped\"]}')  
          print(f'üì° **API calls:** {meta[\"api_calls_made\"]}')
          print(f'üéØ **Success rate:** {meta[\"success_rate\"]}%')
          " >> $GITHUB_STEP_SUMMARY
          else
              echo "‚ùå **Status:** Failed to generate mapping" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìÅ **Generated files:**" >> $GITHUB_STEP_SUMMARY
          ls -la output/ | tail -n +2 | while read line; do
              filename=$(echo $line | awk '{print $9}')
              filesize=$(echo $line | awk '{print $5}')
              echo "- \`$filename\` (${filesize} bytes)" >> $GITHUB_STEP_SUMMARY
          done 
